#!/bin/bash

# Packages code according to the arguments passed in.
# Actively used by update-custom-resources

usage() {
    printf "\
usage: $(basename "$0") [-c CONFIG_FILE=infra.yml] [-e ENV]
    ENV         - environment to deploy in; this is template-specific, and can vary slightly
    CONFIG_FILE - file containing the configuration for your template
" >&2
}
exit_bad() {
    usage
    exit 1
}

cleanup() {
    CODE=$?
    set +e
    rm -rf "$TMP_TEMPLATE" &>/dev/null
    exit $CODE
}

null_blank() {
    X_VALUE="$(cat /dev/stdin)"
    [[ "$X_VALUE" != 'null' ]] && echo "$X_VALUE" || echo ""
}
not_null() {
    [[ 'null' != "$(yq "$1" <<< "$2" 2>/dev/null)" ]]
    return $?
}
has_keys() {
    not_null "$1" "$2" && [[ "$(yq "$1 | keys | length" <<< "$2" 2>/dev/null)" != 0 ]]
    return $?
}

# do_config_subs() {
#     RESULT="$(sed 's@{{ \(.\+\) }}@\1@g' <<< "$1")"
#     if [[ -n "$RESULT" ]]; then
#         RESULT="$(do_config_subs <<< "$RESULT")"
#         if [[ "$RESULT" = env ]]; then
#             printf -- "$ENV"
#         elif [[ "$RESULT" = "file "* ]]; then

#         fi
#     else
#         printf -- "$1"
#     fi
# }

set -e

trap cleanup EXIT ERR INT TERM

DIR="$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )/.."
SAM="$([[ $OS = "Windows"* ]] && echo sam.cmd || echo sam)"

ENV=
CONFIG_FILE=
while getopts "e:c:" OPT; do
    case "$OPT" in
        e)
            ENV="$OPTARG"
            ;;
        c)
            CONFIG_FILE="$OPTARG"
            ;;
        :)
            echo "error: -$OPTARG requires an argument" >&2
            exit_bad
            ;;
        *)
            echo "error: invalid option -$OPTARG" >&2
            exit_bad
            ;;
    esac
done

CONFIG_FILE="${CONFIG_FILE:-"infra.yml"}"
DASH_ENV="$([[ -z $ENV ]] && echo "" || echo "-$ENV")"
ENV_TAG="$([[ -z $ENV ]] && echo "" || echo "Env=$ENV")"
CONFIG="$(sed "s@{{ env }}@$ENV@g" < "$CONFIG_FILE")"

cd "$(dirname "$CONFIG_FILE")"

TEMPLATE_NAME="$(yq '.Template' <<< "$CONFIG")"
APP_NAME="$(yq '.AppName' <<< "$CONFIG")"
REGIONS="$(yq '.Regions[]' <<< "$CONFIG")"
PRE_BUILD="$(yq '.PreBuild' <<< "$CONFIG" | null_blank)"
ROLLBACK_FLAG="$([[ "$(yq '.RollbackDisabled' <<< "$CONFIG")" = true ]] && echo --disable-rollback || echo --no-disable-rollback)"

TOPIC="$(aws ssm get-parameter --name ' /global/stack-notifications-topic-arn' --output text --query 'Parameter.Value')"
NOTIFICATIONS="$([[ $? = 0 ]] && echo --notification-arns $TOPIC || echo '')"
S3_BUCKET="$(aws ssm get-parameter --name ' /global/bucket-name' --output text --query 'Parameter.Value')"

STACK_NAME="$TEMPLATE_NAME-$APP_NAME$DASH_ENV"
TEMPLATE="$(cat "$DIR/templates/$TEMPLATE_NAME.yml")"

if not_null '.Metadata' "$TEMPLATE" && has_keys '.Metadata.Substitution' "$TEMPLATE" && not_null '.Substitution' "$CONFIG"; then
    while read NAME; do 
        UPDATE="$(yq ".Metadata.Substitution.$NAME" <<< "$TEMPLATE")"
        VALUE="$(yq -o json -I 0 ".Substitution.$NAME" <<< "$CONFIG")"
        if not_null "$VALUE"; then 
            TEMPLATE="$(yq "$UPDATE = $VALUE" <<< "$TEMPLATE")"
        fi
    done <<< "$(yq -o j -I 0 '.Metadata.Substitution | keys | .[]' <<< "$TEMPLATE" | jq -r | sed 's@\r@@g')"
fi
TMP_TEMPLATE=".tmp-infra-$RANDOM"
echo "$TEMPLATE" > "$TMP_TEMPLATE"

PARAMETERS=
if [[ "$(yq '.Parameters' <<< "$CONFIG")" != null ]] && [[ "$(yq '.Parameters | keys | length' <<< "$CONFIG")" != 0 ]]; then
    while read NAME; do
        VALUE="$(yq ".Parameters.$NAME" <<< "$CONFIG")"
        PARAMETERS+=" $NAME=$VALUE"
    done <<< "$(yq '.Parameters | keys | .[]' <<< "$CONFIG")"
fi
PARAMETER_OVERRIDES="$([[ -z "$PARAMETERS" ]] && echo "" || echo "--parameter-overrides $PARAMETERS")" 

if [[ -n "$PRE_BUILD" ]]; then
    echo "running build override command: $PRE_BUILD"
    if ! bash -c "$PRE_BUILD"; then
        echo "build override failed - command: $PRE_BUILD" >&2
        exit 1
    fi
    echo "build override - success"
fi
while read REGION; do
    BUILD_DIR=".aws-sam/build-$STACK_NAME-$REGION"
    $SAM build \
        --template "$TMP_TEMPLATE" \
        --build-dir "$BUILD_DIR" \
        --region "$REGION" \
        $PARAMETER_OVERRIDES
    DEPLOY_TEMPLATE="$BUILD_DIR/template.yaml"
    $SAM deploy \
        --stack-name "$STACK_NAME" \
        --region "$REGION" \
        --template "$DEPLOY_TEMPLATE" \
        --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND \
        --no-confirm-changeset \
        --s3-bucket "$S3_BUCKET" \
        --s3-prefix "code/sam-artifacts/$STACK_NAME" \
        --tags "AppName=$APP_NAME" $ENV_TAG \
        $ROLLBACK_FLAG \
        $NOTIFICATIONS \
        $PARAMETER_OVERRIDES
done <<< "$REGIONS"
