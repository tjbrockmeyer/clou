name: Deploy Custom Resources
on:
  push:
    branches:
      - master
      - main
    paths:
      - 'aws/custom-resources/packages/**'
  workflow_dispatch:
    inputs:
      action: 
        description: the type of action to take for each package
        required: true
        type: choice
        options:
          - create/update
          - delete
      packages:
        description: space-separated package names
        required: true
        type: string

env: 
  ROLE: arn:aws:iam::060868188835:role/infra-github-runner
  BASE_PATH: aws/custom-resources/packages

jobs:
  getPackages:
    name: Get Changed Packages
    runs-on: ubuntu-latest
    outputs:
      hasChangedPackages: ${{ steps.getChangedPackages.outputs.hasPackages }}
      hasDeletedPackages: ${{ steps.getDeleted.outputs.hasPackages }}
      changedPackages: ${{ steps.getChangedPackages.outputs.packages }}
      deletedPackages: ${{ steps.getDeletedPackages.outputs.packages }}
    steps:
      - uses: frenck/action-setup-yq@v1
      - uses: actions/checkout@v3
      - uses: tj-actions/changed-files@v18.7
        id: changedFiles
      - uses: tj-actions/changed-files@v18.7
        id: infraYmls
        with:
          files: '${{ env.BASE_PATH }}/**/infra.yml'
      - name: Find Added/Changed Packages
        id: getChangedPackages
        run: |
          cd ${{ env.BASE_PATH }}
          if [[ "${{ github.event_name }}" = workflow_dispatch ]]; then
            if [[ "${{ github.event.inputs.action }}" = 'create/update' ]]; then
              CHANGES=
              for PACKAGE in ${{ github.event.inputs.packages }}; do
                CHANGES+=",\"$PACKAGE\""
              done
            fi
          else
            PACKAGES=
            for PACKAGE in *; do
              if [[ -e "$PACKAGE/infra.yml" ]] && [[ "$(yq '.Template' < "$PACKAGE/infra.yml")" = custom-resource ]]; then
                PACKAGES+=" $PACKAGE"
              fi
            done
            CHANGES=
            for PACKAGE in $PACKAGES; do
              for FILE in ${{ steps.changedFiles.outputs.all_changed_and_modified_files }}; do
                if [[ "$FILE" = "${{ env.BASE_PATH }}/$PACKAGE/"* ]]; then
                  CHANGES+=",\"$PACKAGE\""
                  break
                fi
              done
            done
          fi
          CHANGES="[$(cut -c2- <<< "$CHANGES")]"
          echo "$CHANGES"
          echo "::set-output name=hasPackages::$([[ "$CHANGES" = '[]' ]] && echo false || echo true)"
          echo "::set-output name=packages::$(echo "$CHANGES")"
      - name: Find Deleted Packages
        id: getDeletedPackages
        run: |
          cd ${{ env.BASE_PATH }}
          if [[ "${{ github.event_name }}" = workflow_dispatch ]]; then
            if [[ "${{ github.event.inputs.action }}" = 'delete' ]]; then
              DELETIONS=
              for PACKAGE in ${{ github.event.inputs.packages }}; do
                DELETIONS+=",\"$PACKAGE\""
              done
            fi
          else
            DELETIONS=
            for PACKAGE in *; do
              for FILE in ${{ steps.infraYmls.outputs.deleted_files }}; do
                if [[ "$FILE" = "${{ env.BASE_PATH }}/$PACKAGE/"* ]]; then
                  DELETIONS+=",\"$PACKAGE\""
                  break
                fi
              done
            done
          fi
          DELETIONS="[$(cut -c2- <<< "$DELETIONS")]"
          echo "$DELETIONS"
          echo "::set-output name=hasPackages::$([[ "$DELETIONS" = '[]' ]] && echo false || echo true)"
          echo "::set-output name=packages::$(echo "$DELETIONS")"

  deployInfra:
    if: needs.getPackages.outputs.hasChangedPackages == 'true'
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: 
      - getPackages
    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJSON(needs.getPackages.outputs.changedPackages) }}
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: frenck/action-setup-yq@v1
      - uses: actions/checkout@v3
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          role-to-assume: ${{ env.ROLE }}
      - name: Get Runtime
        id: getRuntime
        run: |
          REGEX='^\([a-zA-Z]\+\)\([0-9.]\+\?\)\(\.x\)\?$'
          FILE="${{ env.BASE_PATH }}/${{ matrix.package }}/infra.yml"
          RUNTIME="$(yq '.Parameters.Runtime' < "$FILE")"
          NAME="$(sed "s@$REGEX@\\1@" <<< "$RUNTIME")"
          VERSION="$(sed "s@$REGEX@\\2@" <<< "$RUNTIME")"
          echo "::set-output name=name::$NAME"
          echo "::set-output name=version::$VERSION"
      - uses: actions/setup-node@v3.1.1
        if: steps.getRuntime.outputs.name == 'nodejs'
        with:
          node-version: ${{ steps.getRuntime.outputs.version }}
      - run: npm i -g npm
        if: steps.getRuntime.outputs.name == 'nodejs'
      - uses: actions/setup-python@v3.1.2
        if: steps.getRuntime.outputs.name == 'python'
        with:
          python-version: ${{ steps.getRuntime.outputs.version }}
      - name: Deploy Infrastructure
        run: |
          ./aws/bin/infra -c "${{ env.BASE_PATH }}/${{ matrix.package }}/infra.yml"
  
  deleteInfra:
    if: needs.getPackages.outputs.hasDeletedPackages == 'true'
    name: Delete Infrastructure
    runs-on: ubuntu-latest
    needs: 
      - getPackages
    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJSON(needs.getPackages.outputs.deletedPackages) }}
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: frenck/action-setup-yq@v1
      - uses: actions/checkout@v3
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          role-to-assume: ${{ env.ROLE }}
      - name: Delete Infrastructure
        run: |
          revive_contents() {
              OUTPUT=$(git rev-list HEAD -n 1 -- "$1" | git checkout $(cat '/dev/stdin')^ "$1" 2>&1)
              if [[ $? != 0 ]]; then
                  echo "$OUTPUT" >&2
                  exit 1
              fi
              cat "$1"
              git rm -f "$1" >/dev/null
          }
          stack_events() {
            # args:
            #   1) stack-name
            #   2) event-count?
            aws cloudformation describe-stack-events \
              --stack-name "$1" \
              --output text \
              --query '
                StackEvents[:'"$2"'].join(`||`, [ResourceType, LogicalResourceId, ResourceStatus, not_null(ResourceStatusReason, `-`)])
                | reverse(@) 
                | join(`;;`, @)' \
              | sed 's@;;@\n@g' \
              | column -s '||' -dN "Type,Id,Status,Reason" -W "Reason" -t
          }
          cd "${{ env.BASE_PATH }}/${{ matrix.package }}"
          STACK_NAME="$(yq '(.Template + "-" + .AppName)' <<< "$(revive_contents infra.yml)")"
          aws cloudformation delete-stack --stack-name="$STACK_NAME"
          while 
            OUTPUT="$(aws cloudformation describe-stacks --stack-name "$STACK_NAME" --output text --query 'Stacks[].StackStatus' 2>/dev/null)"
            [[ "$OUTPUT" = DELETE_IN_PROGRESS ]]
          do
            sleep 3
          done
          if [[ "$OUTPUT" != '' ]]; then
            stack_events "$STACK_NAME" 10
            echo "failed to delete the $STACK_NAME stack - status: $OUTPUT" >&2
            exit 1
          fi

